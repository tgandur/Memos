// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/memorelation"
)

// MemoRelation is the model entity for the MemoRelation schema.
type MemoRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// MemoID holds the value of the "memo_id" field.
	MemoID int `json:"memo_id,omitempty"`
	// RelatedMemoID holds the value of the "related_memo_id" field.
	RelatedMemoID int `json:"related_memo_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemoRelationQuery when eager-loading is set.
	Edges        MemoRelationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemoRelationEdges holds the relations/edges for other nodes in the graph.
type MemoRelationEdges struct {
	// Memo holds the value of the memo edge.
	Memo *Memo `json:"memo,omitempty"`
	// RelatedMemo holds the value of the related_memo edge.
	RelatedMemo *Memo `json:"related_memo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemoOrErr returns the Memo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemoRelationEdges) MemoOrErr() (*Memo, error) {
	if e.loadedTypes[0] {
		if e.Memo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: memo.Label}
		}
		return e.Memo, nil
	}
	return nil, &NotLoadedError{edge: "memo"}
}

// RelatedMemoOrErr returns the RelatedMemo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemoRelationEdges) RelatedMemoOrErr() (*Memo, error) {
	if e.loadedTypes[1] {
		if e.RelatedMemo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: memo.Label}
		}
		return e.RelatedMemo, nil
	}
	return nil, &NotLoadedError{edge: "related_memo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemoRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memorelation.FieldID, memorelation.FieldMemoID, memorelation.FieldRelatedMemoID:
			values[i] = new(sql.NullInt64)
		case memorelation.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemoRelation fields.
func (mr *MemoRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memorelation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case memorelation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mr.Type = value.String
			}
		case memorelation.FieldMemoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memo_id", values[i])
			} else if value.Valid {
				mr.MemoID = int(value.Int64)
			}
		case memorelation.FieldRelatedMemoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field related_memo_id", values[i])
			} else if value.Valid {
				mr.RelatedMemoID = int(value.Int64)
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemoRelation.
// This includes values selected through modifiers, order, etc.
func (mr *MemoRelation) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryMemo queries the "memo" edge of the MemoRelation entity.
func (mr *MemoRelation) QueryMemo() *MemoQuery {
	return NewMemoRelationClient(mr.config).QueryMemo(mr)
}

// QueryRelatedMemo queries the "related_memo" edge of the MemoRelation entity.
func (mr *MemoRelation) QueryRelatedMemo() *MemoQuery {
	return NewMemoRelationClient(mr.config).QueryRelatedMemo(mr)
}

// Update returns a builder for updating this MemoRelation.
// Note that you need to call MemoRelation.Unwrap() before calling this method if this MemoRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MemoRelation) Update() *MemoRelationUpdateOne {
	return NewMemoRelationClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MemoRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MemoRelation) Unwrap() *MemoRelation {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemoRelation is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MemoRelation) String() string {
	var builder strings.Builder
	builder.WriteString("MemoRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("type=")
	builder.WriteString(mr.Type)
	builder.WriteString(", ")
	builder.WriteString("memo_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.MemoID))
	builder.WriteString(", ")
	builder.WriteString("related_memo_id=")
	builder.WriteString(fmt.Sprintf("%v", mr.RelatedMemoID))
	builder.WriteByte(')')
	return builder.String()
}

// MemoRelations is a parsable slice of MemoRelation.
type MemoRelations []*MemoRelation
