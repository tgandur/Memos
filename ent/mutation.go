// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/memorelation"
	"github.com/usememos/memos/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMemo         = "Memo"
	TypeMemoRelation = "MemoRelation"
)

// MemoMutation represents an operation that mutates the Memo nodes in the graph.
type MemoMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	resource_name        *string
	creator_id           *int
	addcreator_id        *int
	created_ts           *time.Time
	updated_ts           *time.Time
	row_status           *string
	content              *string
	visibility           *string
	clearedFields        map[string]struct{}
	related_memo         map[int]struct{}
	removedrelated_memo  map[int]struct{}
	clearedrelated_memo  bool
	memo_relation        map[int]struct{}
	removedmemo_relation map[int]struct{}
	clearedmemo_relation bool
	done                 bool
	oldValue             func(context.Context) (*Memo, error)
	predicates           []predicate.Memo
}

var _ ent.Mutation = (*MemoMutation)(nil)

// memoOption allows management of the mutation configuration using functional options.
type memoOption func(*MemoMutation)

// newMemoMutation creates new mutation for the Memo entity.
func newMemoMutation(c config, op Op, opts ...memoOption) *MemoMutation {
	m := &MemoMutation{
		config:        c,
		op:            op,
		typ:           TypeMemo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemoID sets the ID field of the mutation.
func withMemoID(id int) memoOption {
	return func(m *MemoMutation) {
		var (
			err   error
			once  sync.Once
			value *Memo
		)
		m.oldValue = func(ctx context.Context) (*Memo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Memo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemo sets the old Memo of the mutation.
func withMemo(node *Memo) memoOption {
	return func(m *MemoMutation) {
		m.oldValue = func(context.Context) (*Memo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Memo entities.
func (m *MemoMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Memo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceName sets the "resource_name" field.
func (m *MemoMutation) SetResourceName(s string) {
	m.resource_name = &s
}

// ResourceName returns the value of the "resource_name" field in the mutation.
func (m *MemoMutation) ResourceName() (r string, exists bool) {
	v := m.resource_name
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceName returns the old "resource_name" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldResourceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceName: %w", err)
	}
	return oldValue.ResourceName, nil
}

// ResetResourceName resets all changes to the "resource_name" field.
func (m *MemoMutation) ResetResourceName() {
	m.resource_name = nil
}

// SetCreatorID sets the "creator_id" field.
func (m *MemoMutation) SetCreatorID(i int) {
	m.creator_id = &i
	m.addcreator_id = nil
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *MemoMutation) CreatorID() (r int, exists bool) {
	v := m.creator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldCreatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// AddCreatorID adds i to the "creator_id" field.
func (m *MemoMutation) AddCreatorID(i int) {
	if m.addcreator_id != nil {
		*m.addcreator_id += i
	} else {
		m.addcreator_id = &i
	}
}

// AddedCreatorID returns the value that was added to the "creator_id" field in this mutation.
func (m *MemoMutation) AddedCreatorID() (r int, exists bool) {
	v := m.addcreator_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *MemoMutation) ResetCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
}

// SetCreatedTs sets the "created_ts" field.
func (m *MemoMutation) SetCreatedTs(t time.Time) {
	m.created_ts = &t
}

// CreatedTs returns the value of the "created_ts" field in the mutation.
func (m *MemoMutation) CreatedTs() (r time.Time, exists bool) {
	v := m.created_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTs returns the old "created_ts" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldCreatedTs(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTs: %w", err)
	}
	return oldValue.CreatedTs, nil
}

// ResetCreatedTs resets all changes to the "created_ts" field.
func (m *MemoMutation) ResetCreatedTs() {
	m.created_ts = nil
}

// SetUpdatedTs sets the "updated_ts" field.
func (m *MemoMutation) SetUpdatedTs(t time.Time) {
	m.updated_ts = &t
}

// UpdatedTs returns the value of the "updated_ts" field in the mutation.
func (m *MemoMutation) UpdatedTs() (r time.Time, exists bool) {
	v := m.updated_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedTs returns the old "updated_ts" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldUpdatedTs(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedTs: %w", err)
	}
	return oldValue.UpdatedTs, nil
}

// ResetUpdatedTs resets all changes to the "updated_ts" field.
func (m *MemoMutation) ResetUpdatedTs() {
	m.updated_ts = nil
}

// SetRowStatus sets the "row_status" field.
func (m *MemoMutation) SetRowStatus(s string) {
	m.row_status = &s
}

// RowStatus returns the value of the "row_status" field in the mutation.
func (m *MemoMutation) RowStatus() (r string, exists bool) {
	v := m.row_status
	if v == nil {
		return
	}
	return *v, true
}

// OldRowStatus returns the old "row_status" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldRowStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowStatus: %w", err)
	}
	return oldValue.RowStatus, nil
}

// ResetRowStatus resets all changes to the "row_status" field.
func (m *MemoMutation) ResetRowStatus() {
	m.row_status = nil
}

// SetContent sets the "content" field.
func (m *MemoMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MemoMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MemoMutation) ResetContent() {
	m.content = nil
}

// SetVisibility sets the "visibility" field.
func (m *MemoMutation) SetVisibility(s string) {
	m.visibility = &s
}

// Visibility returns the value of the "visibility" field in the mutation.
func (m *MemoMutation) Visibility() (r string, exists bool) {
	v := m.visibility
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibility returns the old "visibility" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldVisibility(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibility is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibility: %w", err)
	}
	return oldValue.Visibility, nil
}

// ResetVisibility resets all changes to the "visibility" field.
func (m *MemoMutation) ResetVisibility() {
	m.visibility = nil
}

// AddRelatedMemoIDs adds the "related_memo" edge to the Memo entity by ids.
func (m *MemoMutation) AddRelatedMemoIDs(ids ...int) {
	if m.related_memo == nil {
		m.related_memo = make(map[int]struct{})
	}
	for i := range ids {
		m.related_memo[ids[i]] = struct{}{}
	}
}

// ClearRelatedMemo clears the "related_memo" edge to the Memo entity.
func (m *MemoMutation) ClearRelatedMemo() {
	m.clearedrelated_memo = true
}

// RelatedMemoCleared reports if the "related_memo" edge to the Memo entity was cleared.
func (m *MemoMutation) RelatedMemoCleared() bool {
	return m.clearedrelated_memo
}

// RemoveRelatedMemoIDs removes the "related_memo" edge to the Memo entity by IDs.
func (m *MemoMutation) RemoveRelatedMemoIDs(ids ...int) {
	if m.removedrelated_memo == nil {
		m.removedrelated_memo = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.related_memo, ids[i])
		m.removedrelated_memo[ids[i]] = struct{}{}
	}
}

// RemovedRelatedMemo returns the removed IDs of the "related_memo" edge to the Memo entity.
func (m *MemoMutation) RemovedRelatedMemoIDs() (ids []int) {
	for id := range m.removedrelated_memo {
		ids = append(ids, id)
	}
	return
}

// RelatedMemoIDs returns the "related_memo" edge IDs in the mutation.
func (m *MemoMutation) RelatedMemoIDs() (ids []int) {
	for id := range m.related_memo {
		ids = append(ids, id)
	}
	return
}

// ResetRelatedMemo resets all changes to the "related_memo" edge.
func (m *MemoMutation) ResetRelatedMemo() {
	m.related_memo = nil
	m.clearedrelated_memo = false
	m.removedrelated_memo = nil
}

// AddMemoRelationIDs adds the "memo_relation" edge to the MemoRelation entity by ids.
func (m *MemoMutation) AddMemoRelationIDs(ids ...int) {
	if m.memo_relation == nil {
		m.memo_relation = make(map[int]struct{})
	}
	for i := range ids {
		m.memo_relation[ids[i]] = struct{}{}
	}
}

// ClearMemoRelation clears the "memo_relation" edge to the MemoRelation entity.
func (m *MemoMutation) ClearMemoRelation() {
	m.clearedmemo_relation = true
}

// MemoRelationCleared reports if the "memo_relation" edge to the MemoRelation entity was cleared.
func (m *MemoMutation) MemoRelationCleared() bool {
	return m.clearedmemo_relation
}

// RemoveMemoRelationIDs removes the "memo_relation" edge to the MemoRelation entity by IDs.
func (m *MemoMutation) RemoveMemoRelationIDs(ids ...int) {
	if m.removedmemo_relation == nil {
		m.removedmemo_relation = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.memo_relation, ids[i])
		m.removedmemo_relation[ids[i]] = struct{}{}
	}
}

// RemovedMemoRelation returns the removed IDs of the "memo_relation" edge to the MemoRelation entity.
func (m *MemoMutation) RemovedMemoRelationIDs() (ids []int) {
	for id := range m.removedmemo_relation {
		ids = append(ids, id)
	}
	return
}

// MemoRelationIDs returns the "memo_relation" edge IDs in the mutation.
func (m *MemoMutation) MemoRelationIDs() (ids []int) {
	for id := range m.memo_relation {
		ids = append(ids, id)
	}
	return
}

// ResetMemoRelation resets all changes to the "memo_relation" edge.
func (m *MemoMutation) ResetMemoRelation() {
	m.memo_relation = nil
	m.clearedmemo_relation = false
	m.removedmemo_relation = nil
}

// Where appends a list predicates to the MemoMutation builder.
func (m *MemoMutation) Where(ps ...predicate.Memo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Memo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Memo).
func (m *MemoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.resource_name != nil {
		fields = append(fields, memo.FieldResourceName)
	}
	if m.creator_id != nil {
		fields = append(fields, memo.FieldCreatorID)
	}
	if m.created_ts != nil {
		fields = append(fields, memo.FieldCreatedTs)
	}
	if m.updated_ts != nil {
		fields = append(fields, memo.FieldUpdatedTs)
	}
	if m.row_status != nil {
		fields = append(fields, memo.FieldRowStatus)
	}
	if m.content != nil {
		fields = append(fields, memo.FieldContent)
	}
	if m.visibility != nil {
		fields = append(fields, memo.FieldVisibility)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memo.FieldResourceName:
		return m.ResourceName()
	case memo.FieldCreatorID:
		return m.CreatorID()
	case memo.FieldCreatedTs:
		return m.CreatedTs()
	case memo.FieldUpdatedTs:
		return m.UpdatedTs()
	case memo.FieldRowStatus:
		return m.RowStatus()
	case memo.FieldContent:
		return m.Content()
	case memo.FieldVisibility:
		return m.Visibility()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memo.FieldResourceName:
		return m.OldResourceName(ctx)
	case memo.FieldCreatorID:
		return m.OldCreatorID(ctx)
	case memo.FieldCreatedTs:
		return m.OldCreatedTs(ctx)
	case memo.FieldUpdatedTs:
		return m.OldUpdatedTs(ctx)
	case memo.FieldRowStatus:
		return m.OldRowStatus(ctx)
	case memo.FieldContent:
		return m.OldContent(ctx)
	case memo.FieldVisibility:
		return m.OldVisibility(ctx)
	}
	return nil, fmt.Errorf("unknown Memo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memo.FieldResourceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceName(v)
		return nil
	case memo.FieldCreatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	case memo.FieldCreatedTs:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTs(v)
		return nil
	case memo.FieldUpdatedTs:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedTs(v)
		return nil
	case memo.FieldRowStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowStatus(v)
		return nil
	case memo.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case memo.FieldVisibility:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibility(v)
		return nil
	}
	return fmt.Errorf("unknown Memo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemoMutation) AddedFields() []string {
	var fields []string
	if m.addcreator_id != nil {
		fields = append(fields, memo.FieldCreatorID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case memo.FieldCreatorID:
		return m.AddedCreatorID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case memo.FieldCreatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatorID(v)
		return nil
	}
	return fmt.Errorf("unknown Memo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Memo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemoMutation) ResetField(name string) error {
	switch name {
	case memo.FieldResourceName:
		m.ResetResourceName()
		return nil
	case memo.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	case memo.FieldCreatedTs:
		m.ResetCreatedTs()
		return nil
	case memo.FieldUpdatedTs:
		m.ResetUpdatedTs()
		return nil
	case memo.FieldRowStatus:
		m.ResetRowStatus()
		return nil
	case memo.FieldContent:
		m.ResetContent()
		return nil
	case memo.FieldVisibility:
		m.ResetVisibility()
		return nil
	}
	return fmt.Errorf("unknown Memo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.related_memo != nil {
		edges = append(edges, memo.EdgeRelatedMemo)
	}
	if m.memo_relation != nil {
		edges = append(edges, memo.EdgeMemoRelation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memo.EdgeRelatedMemo:
		ids := make([]ent.Value, 0, len(m.related_memo))
		for id := range m.related_memo {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeMemoRelation:
		ids := make([]ent.Value, 0, len(m.memo_relation))
		for id := range m.memo_relation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrelated_memo != nil {
		edges = append(edges, memo.EdgeRelatedMemo)
	}
	if m.removedmemo_relation != nil {
		edges = append(edges, memo.EdgeMemoRelation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case memo.EdgeRelatedMemo:
		ids := make([]ent.Value, 0, len(m.removedrelated_memo))
		for id := range m.removedrelated_memo {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeMemoRelation:
		ids := make([]ent.Value, 0, len(m.removedmemo_relation))
		for id := range m.removedmemo_relation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrelated_memo {
		edges = append(edges, memo.EdgeRelatedMemo)
	}
	if m.clearedmemo_relation {
		edges = append(edges, memo.EdgeMemoRelation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemoMutation) EdgeCleared(name string) bool {
	switch name {
	case memo.EdgeRelatedMemo:
		return m.clearedrelated_memo
	case memo.EdgeMemoRelation:
		return m.clearedmemo_relation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Memo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemoMutation) ResetEdge(name string) error {
	switch name {
	case memo.EdgeRelatedMemo:
		m.ResetRelatedMemo()
		return nil
	case memo.EdgeMemoRelation:
		m.ResetMemoRelation()
		return nil
	}
	return fmt.Errorf("unknown Memo edge %s", name)
}

// MemoRelationMutation represents an operation that mutates the MemoRelation nodes in the graph.
type MemoRelationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *string
	clearedFields       map[string]struct{}
	memo                *int
	clearedmemo         bool
	related_memo        *int
	clearedrelated_memo bool
	done                bool
	oldValue            func(context.Context) (*MemoRelation, error)
	predicates          []predicate.MemoRelation
}

var _ ent.Mutation = (*MemoRelationMutation)(nil)

// memorelationOption allows management of the mutation configuration using functional options.
type memorelationOption func(*MemoRelationMutation)

// newMemoRelationMutation creates new mutation for the MemoRelation entity.
func newMemoRelationMutation(c config, op Op, opts ...memorelationOption) *MemoRelationMutation {
	m := &MemoRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeMemoRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemoRelationID sets the ID field of the mutation.
func withMemoRelationID(id int) memorelationOption {
	return func(m *MemoRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *MemoRelation
		)
		m.oldValue = func(ctx context.Context) (*MemoRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MemoRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemoRelation sets the old MemoRelation of the mutation.
func withMemoRelation(node *MemoRelation) memorelationOption {
	return func(m *MemoRelationMutation) {
		m.oldValue = func(context.Context) (*MemoRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemoRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemoRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemoRelationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemoRelationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MemoRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *MemoRelationMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MemoRelationMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the MemoRelation entity.
// If the MemoRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoRelationMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MemoRelationMutation) ResetType() {
	m._type = nil
}

// SetMemoID sets the "memo_id" field.
func (m *MemoRelationMutation) SetMemoID(i int) {
	m.memo = &i
}

// MemoID returns the value of the "memo_id" field in the mutation.
func (m *MemoRelationMutation) MemoID() (r int, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemoID returns the old "memo_id" field's value of the MemoRelation entity.
// If the MemoRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoRelationMutation) OldMemoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemoID: %w", err)
	}
	return oldValue.MemoID, nil
}

// ResetMemoID resets all changes to the "memo_id" field.
func (m *MemoRelationMutation) ResetMemoID() {
	m.memo = nil
}

// SetRelatedMemoID sets the "related_memo_id" field.
func (m *MemoRelationMutation) SetRelatedMemoID(i int) {
	m.related_memo = &i
}

// RelatedMemoID returns the value of the "related_memo_id" field in the mutation.
func (m *MemoRelationMutation) RelatedMemoID() (r int, exists bool) {
	v := m.related_memo
	if v == nil {
		return
	}
	return *v, true
}

// OldRelatedMemoID returns the old "related_memo_id" field's value of the MemoRelation entity.
// If the MemoRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoRelationMutation) OldRelatedMemoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelatedMemoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelatedMemoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelatedMemoID: %w", err)
	}
	return oldValue.RelatedMemoID, nil
}

// ResetRelatedMemoID resets all changes to the "related_memo_id" field.
func (m *MemoRelationMutation) ResetRelatedMemoID() {
	m.related_memo = nil
}

// ClearMemo clears the "memo" edge to the Memo entity.
func (m *MemoRelationMutation) ClearMemo() {
	m.clearedmemo = true
	m.clearedFields[memorelation.FieldMemoID] = struct{}{}
}

// MemoCleared reports if the "memo" edge to the Memo entity was cleared.
func (m *MemoRelationMutation) MemoCleared() bool {
	return m.clearedmemo
}

// MemoIDs returns the "memo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MemoID instead. It exists only for internal usage by the builders.
func (m *MemoRelationMutation) MemoIDs() (ids []int) {
	if id := m.memo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMemo resets all changes to the "memo" edge.
func (m *MemoRelationMutation) ResetMemo() {
	m.memo = nil
	m.clearedmemo = false
}

// ClearRelatedMemo clears the "related_memo" edge to the Memo entity.
func (m *MemoRelationMutation) ClearRelatedMemo() {
	m.clearedrelated_memo = true
	m.clearedFields[memorelation.FieldRelatedMemoID] = struct{}{}
}

// RelatedMemoCleared reports if the "related_memo" edge to the Memo entity was cleared.
func (m *MemoRelationMutation) RelatedMemoCleared() bool {
	return m.clearedrelated_memo
}

// RelatedMemoIDs returns the "related_memo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelatedMemoID instead. It exists only for internal usage by the builders.
func (m *MemoRelationMutation) RelatedMemoIDs() (ids []int) {
	if id := m.related_memo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelatedMemo resets all changes to the "related_memo" edge.
func (m *MemoRelationMutation) ResetRelatedMemo() {
	m.related_memo = nil
	m.clearedrelated_memo = false
}

// Where appends a list predicates to the MemoRelationMutation builder.
func (m *MemoRelationMutation) Where(ps ...predicate.MemoRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemoRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemoRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MemoRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemoRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemoRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MemoRelation).
func (m *MemoRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemoRelationMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, memorelation.FieldType)
	}
	if m.memo != nil {
		fields = append(fields, memorelation.FieldMemoID)
	}
	if m.related_memo != nil {
		fields = append(fields, memorelation.FieldRelatedMemoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemoRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memorelation.FieldType:
		return m.GetType()
	case memorelation.FieldMemoID:
		return m.MemoID()
	case memorelation.FieldRelatedMemoID:
		return m.RelatedMemoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemoRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memorelation.FieldType:
		return m.OldType(ctx)
	case memorelation.FieldMemoID:
		return m.OldMemoID(ctx)
	case memorelation.FieldRelatedMemoID:
		return m.OldRelatedMemoID(ctx)
	}
	return nil, fmt.Errorf("unknown MemoRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memorelation.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case memorelation.FieldMemoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemoID(v)
		return nil
	case memorelation.FieldRelatedMemoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelatedMemoID(v)
		return nil
	}
	return fmt.Errorf("unknown MemoRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemoRelationMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemoRelationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MemoRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemoRelationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemoRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemoRelationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MemoRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemoRelationMutation) ResetField(name string) error {
	switch name {
	case memorelation.FieldType:
		m.ResetType()
		return nil
	case memorelation.FieldMemoID:
		m.ResetMemoID()
		return nil
	case memorelation.FieldRelatedMemoID:
		m.ResetRelatedMemoID()
		return nil
	}
	return fmt.Errorf("unknown MemoRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemoRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.memo != nil {
		edges = append(edges, memorelation.EdgeMemo)
	}
	if m.related_memo != nil {
		edges = append(edges, memorelation.EdgeRelatedMemo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemoRelationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memorelation.EdgeMemo:
		if id := m.memo; id != nil {
			return []ent.Value{*id}
		}
	case memorelation.EdgeRelatedMemo:
		if id := m.related_memo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemoRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemoRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemoRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmemo {
		edges = append(edges, memorelation.EdgeMemo)
	}
	if m.clearedrelated_memo {
		edges = append(edges, memorelation.EdgeRelatedMemo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemoRelationMutation) EdgeCleared(name string) bool {
	switch name {
	case memorelation.EdgeMemo:
		return m.clearedmemo
	case memorelation.EdgeRelatedMemo:
		return m.clearedrelated_memo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemoRelationMutation) ClearEdge(name string) error {
	switch name {
	case memorelation.EdgeMemo:
		m.ClearMemo()
		return nil
	case memorelation.EdgeRelatedMemo:
		m.ClearRelatedMemo()
		return nil
	}
	return fmt.Errorf("unknown MemoRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemoRelationMutation) ResetEdge(name string) error {
	switch name {
	case memorelation.EdgeMemo:
		m.ResetMemo()
		return nil
	case memorelation.EdgeRelatedMemo:
		m.ResetRelatedMemo()
		return nil
	}
	return fmt.Errorf("unknown MemoRelation edge %s", name)
}
