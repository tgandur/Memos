// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/memorelation"
)

// MemoCreate is the builder for creating a Memo entity.
type MemoCreate struct {
	config
	mutation *MemoMutation
	hooks    []Hook
}

// SetResourceName sets the "resource_name" field.
func (mc *MemoCreate) SetResourceName(s string) *MemoCreate {
	mc.mutation.SetResourceName(s)
	return mc
}

// SetCreatorID sets the "creator_id" field.
func (mc *MemoCreate) SetCreatorID(i int) *MemoCreate {
	mc.mutation.SetCreatorID(i)
	return mc
}

// SetCreatedTs sets the "created_ts" field.
func (mc *MemoCreate) SetCreatedTs(t time.Time) *MemoCreate {
	mc.mutation.SetCreatedTs(t)
	return mc
}

// SetUpdatedTs sets the "updated_ts" field.
func (mc *MemoCreate) SetUpdatedTs(t time.Time) *MemoCreate {
	mc.mutation.SetUpdatedTs(t)
	return mc
}

// SetRowStatus sets the "row_status" field.
func (mc *MemoCreate) SetRowStatus(s string) *MemoCreate {
	mc.mutation.SetRowStatus(s)
	return mc
}

// SetContent sets the "content" field.
func (mc *MemoCreate) SetContent(s string) *MemoCreate {
	mc.mutation.SetContent(s)
	return mc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mc *MemoCreate) SetNillableContent(s *string) *MemoCreate {
	if s != nil {
		mc.SetContent(*s)
	}
	return mc
}

// SetVisibility sets the "visibility" field.
func (mc *MemoCreate) SetVisibility(s string) *MemoCreate {
	mc.mutation.SetVisibility(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MemoCreate) SetID(i int) *MemoCreate {
	mc.mutation.SetID(i)
	return mc
}

// AddRelatedMemoIDs adds the "related_memo" edge to the Memo entity by IDs.
func (mc *MemoCreate) AddRelatedMemoIDs(ids ...int) *MemoCreate {
	mc.mutation.AddRelatedMemoIDs(ids...)
	return mc
}

// AddRelatedMemo adds the "related_memo" edges to the Memo entity.
func (mc *MemoCreate) AddRelatedMemo(m ...*Memo) *MemoCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddRelatedMemoIDs(ids...)
}

// AddMemoRelationIDs adds the "memo_relation" edge to the MemoRelation entity by IDs.
func (mc *MemoCreate) AddMemoRelationIDs(ids ...int) *MemoCreate {
	mc.mutation.AddMemoRelationIDs(ids...)
	return mc
}

// AddMemoRelation adds the "memo_relation" edges to the MemoRelation entity.
func (mc *MemoCreate) AddMemoRelation(m ...*MemoRelation) *MemoCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMemoRelationIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (mc *MemoCreate) Mutation() *MemoMutation {
	return mc.mutation
}

// Save creates the Memo in the database.
func (mc *MemoCreate) Save(ctx context.Context) (*Memo, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemoCreate) SaveX(ctx context.Context) *Memo {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemoCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemoCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MemoCreate) defaults() {
	if _, ok := mc.mutation.Content(); !ok {
		v := memo.DefaultContent
		mc.mutation.SetContent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemoCreate) check() error {
	if _, ok := mc.mutation.ResourceName(); !ok {
		return &ValidationError{Name: "resource_name", err: errors.New(`ent: missing required field "Memo.resource_name"`)}
	}
	if v, ok := mc.mutation.ResourceName(); ok {
		if err := memo.ResourceNameValidator(v); err != nil {
			return &ValidationError{Name: "resource_name", err: fmt.Errorf(`ent: validator failed for field "Memo.resource_name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Memo.creator_id"`)}
	}
	if v, ok := mc.mutation.CreatorID(); ok {
		if err := memo.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Memo.creator_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedTs(); !ok {
		return &ValidationError{Name: "created_ts", err: errors.New(`ent: missing required field "Memo.created_ts"`)}
	}
	if _, ok := mc.mutation.UpdatedTs(); !ok {
		return &ValidationError{Name: "updated_ts", err: errors.New(`ent: missing required field "Memo.updated_ts"`)}
	}
	if _, ok := mc.mutation.RowStatus(); !ok {
		return &ValidationError{Name: "row_status", err: errors.New(`ent: missing required field "Memo.row_status"`)}
	}
	if v, ok := mc.mutation.RowStatus(); ok {
		if err := memo.RowStatusValidator(v); err != nil {
			return &ValidationError{Name: "row_status", err: fmt.Errorf(`ent: validator failed for field "Memo.row_status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Memo.content"`)}
	}
	if _, ok := mc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Memo.visibility"`)}
	}
	if v, ok := mc.mutation.Visibility(); ok {
		if err := memo.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Memo.visibility": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := memo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Memo.id": %w`, err)}
		}
	}
	return nil
}

func (mc *MemoCreate) sqlSave(ctx context.Context) (*Memo, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MemoCreate) createSpec() (*Memo, *sqlgraph.CreateSpec) {
	var (
		_node = &Memo{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(memo.Table, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.ResourceName(); ok {
		_spec.SetField(memo.FieldResourceName, field.TypeString, value)
		_node.ResourceName = value
	}
	if value, ok := mc.mutation.CreatorID(); ok {
		_spec.SetField(memo.FieldCreatorID, field.TypeInt, value)
		_node.CreatorID = value
	}
	if value, ok := mc.mutation.CreatedTs(); ok {
		_spec.SetField(memo.FieldCreatedTs, field.TypeTime, value)
		_node.CreatedTs = value
	}
	if value, ok := mc.mutation.UpdatedTs(); ok {
		_spec.SetField(memo.FieldUpdatedTs, field.TypeTime, value)
		_node.UpdatedTs = value
	}
	if value, ok := mc.mutation.RowStatus(); ok {
		_spec.SetField(memo.FieldRowStatus, field.TypeString, value)
		_node.RowStatus = value
	}
	if value, ok := mc.mutation.Content(); ok {
		_spec.SetField(memo.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mc.mutation.Visibility(); ok {
		_spec.SetField(memo.FieldVisibility, field.TypeString, value)
		_node.Visibility = value
	}
	if nodes := mc.mutation.RelatedMemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemoRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemoCreateBulk is the builder for creating many Memo entities in bulk.
type MemoCreateBulk struct {
	config
	err      error
	builders []*MemoCreate
}

// Save creates the Memo entities in the database.
func (mcb *MemoCreateBulk) Save(ctx context.Context) ([]*Memo, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Memo, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemoCreateBulk) SaveX(ctx context.Context) []*Memo {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemoCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemoCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
