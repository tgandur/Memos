// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	memoFields := schema.Memo{}.Fields()
	_ = memoFields
	// memoDescResourceName is the schema descriptor for resource_name field.
	memoDescResourceName := memoFields[1].Descriptor()
	// memo.ResourceNameValidator is a validator for the "resource_name" field. It is called by the builders before save.
	memo.ResourceNameValidator = func() func(string) error {
		validators := memoDescResourceName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(resource_name string) error {
			for _, fn := range fns {
				if err := fn(resource_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// memoDescCreatorID is the schema descriptor for creator_id field.
	memoDescCreatorID := memoFields[2].Descriptor()
	// memo.CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	memo.CreatorIDValidator = memoDescCreatorID.Validators[0].(func(int) error)
	// memoDescRowStatus is the schema descriptor for row_status field.
	memoDescRowStatus := memoFields[5].Descriptor()
	// memo.RowStatusValidator is a validator for the "row_status" field. It is called by the builders before save.
	memo.RowStatusValidator = func() func(string) error {
		validators := memoDescRowStatus.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(row_status string) error {
			for _, fn := range fns {
				if err := fn(row_status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// memoDescContent is the schema descriptor for content field.
	memoDescContent := memoFields[6].Descriptor()
	// memo.DefaultContent holds the default value on creation for the content field.
	memo.DefaultContent = memoDescContent.Default.(string)
	// memoDescVisibility is the schema descriptor for visibility field.
	memoDescVisibility := memoFields[7].Descriptor()
	// memo.VisibilityValidator is a validator for the "visibility" field. It is called by the builders before save.
	memo.VisibilityValidator = func() func(string) error {
		validators := memoDescVisibility.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(visibility string) error {
			for _, fn := range fns {
				if err := fn(visibility); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// memoDescID is the schema descriptor for id field.
	memoDescID := memoFields[0].Descriptor()
	// memo.IDValidator is a validator for the "id" field. It is called by the builders before save.
	memo.IDValidator = memoDescID.Validators[0].(func(int) error)
}
