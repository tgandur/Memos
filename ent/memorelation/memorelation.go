// Code generated by ent, DO NOT EDIT.

package memorelation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the memorelation type in the database.
	Label = "memo_relation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMemoID holds the string denoting the memo_id field in the database.
	FieldMemoID = "memo_id"
	// FieldRelatedMemoID holds the string denoting the related_memo_id field in the database.
	FieldRelatedMemoID = "related_memo_id"
	// EdgeMemo holds the string denoting the memo edge name in mutations.
	EdgeMemo = "memo"
	// EdgeRelatedMemo holds the string denoting the related_memo edge name in mutations.
	EdgeRelatedMemo = "related_memo"
	// Table holds the table name of the memorelation in the database.
	Table = "memo_relations"
	// MemoTable is the table that holds the memo relation/edge.
	MemoTable = "memo_relations"
	// MemoInverseTable is the table name for the Memo entity.
	// It exists in this package in order to avoid circular dependency with the "memo" package.
	MemoInverseTable = "memos"
	// MemoColumn is the table column denoting the memo relation/edge.
	MemoColumn = "memo_id"
	// RelatedMemoTable is the table that holds the related_memo relation/edge.
	RelatedMemoTable = "memo_relations"
	// RelatedMemoInverseTable is the table name for the Memo entity.
	// It exists in this package in order to avoid circular dependency with the "memo" package.
	RelatedMemoInverseTable = "memos"
	// RelatedMemoColumn is the table column denoting the related_memo relation/edge.
	RelatedMemoColumn = "related_memo_id"
)

// Columns holds all SQL columns for memorelation fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldMemoID,
	FieldRelatedMemoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MemoRelation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByMemoID orders the results by the memo_id field.
func ByMemoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoID, opts...).ToFunc()
}

// ByRelatedMemoID orders the results by the related_memo_id field.
func ByRelatedMemoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelatedMemoID, opts...).ToFunc()
}

// ByMemoField orders the results by memo field.
func ByMemoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelatedMemoField orders the results by related_memo field.
func ByRelatedMemoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedMemoStep(), sql.OrderByField(field, opts...))
	}
}
func newMemoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemoTable, MemoColumn),
	)
}
func newRelatedMemoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedMemoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RelatedMemoTable, RelatedMemoColumn),
	)
}
