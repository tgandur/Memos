// Code generated by ent, DO NOT EDIT.

package memo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the memo type in the database.
	Label = "memo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceName holds the string denoting the resource_name field in the database.
	FieldResourceName = "resource_name"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldCreatedTs holds the string denoting the created_ts field in the database.
	FieldCreatedTs = "created_ts"
	// FieldUpdatedTs holds the string denoting the updated_ts field in the database.
	FieldUpdatedTs = "updated_ts"
	// FieldRowStatus holds the string denoting the row_status field in the database.
	FieldRowStatus = "row_status"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldVisibility holds the string denoting the visibility field in the database.
	FieldVisibility = "visibility"
	// EdgeRelatedMemo holds the string denoting the related_memo edge name in mutations.
	EdgeRelatedMemo = "related_memo"
	// EdgeMemoRelation holds the string denoting the memo_relation edge name in mutations.
	EdgeMemoRelation = "memo_relation"
	// Table holds the table name of the memo in the database.
	Table = "memos"
	// RelatedMemoTable is the table that holds the related_memo relation/edge. The primary key declared below.
	RelatedMemoTable = "memo_relations"
	// MemoRelationTable is the table that holds the memo_relation relation/edge.
	MemoRelationTable = "memo_relations"
	// MemoRelationInverseTable is the table name for the MemoRelation entity.
	// It exists in this package in order to avoid circular dependency with the "memorelation" package.
	MemoRelationInverseTable = "memo_relations"
	// MemoRelationColumn is the table column denoting the memo_relation relation/edge.
	MemoRelationColumn = "memo_id"
)

// Columns holds all SQL columns for memo fields.
var Columns = []string{
	FieldID,
	FieldResourceName,
	FieldCreatorID,
	FieldCreatedTs,
	FieldUpdatedTs,
	FieldRowStatus,
	FieldContent,
	FieldVisibility,
}

var (
	// RelatedMemoPrimaryKey and RelatedMemoColumn2 are the table columns denoting the
	// primary key for the related_memo relation (M2M).
	RelatedMemoPrimaryKey = []string{"memo_id", "related_memo_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ResourceNameValidator is a validator for the "resource_name" field. It is called by the builders before save.
	ResourceNameValidator func(string) error
	// CreatorIDValidator is a validator for the "creator_id" field. It is called by the builders before save.
	CreatorIDValidator func(int) error
	// RowStatusValidator is a validator for the "row_status" field. It is called by the builders before save.
	RowStatusValidator func(string) error
	// DefaultContent holds the default value on creation for the "content" field.
	DefaultContent string
	// VisibilityValidator is a validator for the "visibility" field. It is called by the builders before save.
	VisibilityValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Memo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceName orders the results by the resource_name field.
func ByResourceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceName, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByCreatedTs orders the results by the created_ts field.
func ByCreatedTs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTs, opts...).ToFunc()
}

// ByUpdatedTs orders the results by the updated_ts field.
func ByUpdatedTs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTs, opts...).ToFunc()
}

// ByRowStatus orders the results by the row_status field.
func ByRowStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowStatus, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByVisibility orders the results by the visibility field.
func ByVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibility, opts...).ToFunc()
}

// ByRelatedMemoCount orders the results by related_memo count.
func ByRelatedMemoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelatedMemoStep(), opts...)
	}
}

// ByRelatedMemo orders the results by related_memo terms.
func ByRelatedMemo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedMemoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemoRelationCount orders the results by memo_relation count.
func ByMemoRelationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemoRelationStep(), opts...)
	}
}

// ByMemoRelation orders the results by memo_relation terms.
func ByMemoRelation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoRelationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRelatedMemoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RelatedMemoTable, RelatedMemoPrimaryKey...),
	)
}
func newMemoRelationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoRelationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MemoRelationTable, MemoRelationColumn),
	)
}
