// Code generated by ent, DO NOT EDIT.

package memo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/usememos/memos/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldID, id))
}

// ResourceName applies equality check predicate on the "resource_name" field. It's identical to ResourceNameEQ.
func ResourceName(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldResourceName, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v int) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldCreatorID, v))
}

// CreatedTs applies equality check predicate on the "created_ts" field. It's identical to CreatedTsEQ.
func CreatedTs(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldCreatedTs, v))
}

// UpdatedTs applies equality check predicate on the "updated_ts" field. It's identical to UpdatedTsEQ.
func UpdatedTs(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldUpdatedTs, v))
}

// RowStatus applies equality check predicate on the "row_status" field. It's identical to RowStatusEQ.
func RowStatus(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldRowStatus, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldContent, v))
}

// Visibility applies equality check predicate on the "visibility" field. It's identical to VisibilityEQ.
func Visibility(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldVisibility, v))
}

// ResourceNameEQ applies the EQ predicate on the "resource_name" field.
func ResourceNameEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldResourceName, v))
}

// ResourceNameNEQ applies the NEQ predicate on the "resource_name" field.
func ResourceNameNEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldResourceName, v))
}

// ResourceNameIn applies the In predicate on the "resource_name" field.
func ResourceNameIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldResourceName, vs...))
}

// ResourceNameNotIn applies the NotIn predicate on the "resource_name" field.
func ResourceNameNotIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldResourceName, vs...))
}

// ResourceNameGT applies the GT predicate on the "resource_name" field.
func ResourceNameGT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldResourceName, v))
}

// ResourceNameGTE applies the GTE predicate on the "resource_name" field.
func ResourceNameGTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldResourceName, v))
}

// ResourceNameLT applies the LT predicate on the "resource_name" field.
func ResourceNameLT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldResourceName, v))
}

// ResourceNameLTE applies the LTE predicate on the "resource_name" field.
func ResourceNameLTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldResourceName, v))
}

// ResourceNameContains applies the Contains predicate on the "resource_name" field.
func ResourceNameContains(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContains(FieldResourceName, v))
}

// ResourceNameHasPrefix applies the HasPrefix predicate on the "resource_name" field.
func ResourceNameHasPrefix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasPrefix(FieldResourceName, v))
}

// ResourceNameHasSuffix applies the HasSuffix predicate on the "resource_name" field.
func ResourceNameHasSuffix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasSuffix(FieldResourceName, v))
}

// ResourceNameEqualFold applies the EqualFold predicate on the "resource_name" field.
func ResourceNameEqualFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEqualFold(FieldResourceName, v))
}

// ResourceNameContainsFold applies the ContainsFold predicate on the "resource_name" field.
func ResourceNameContainsFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContainsFold(FieldResourceName, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v int) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v int) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...int) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...int) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v int) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v int) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v int) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v int) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldCreatorID, v))
}

// CreatedTsEQ applies the EQ predicate on the "created_ts" field.
func CreatedTsEQ(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldCreatedTs, v))
}

// CreatedTsNEQ applies the NEQ predicate on the "created_ts" field.
func CreatedTsNEQ(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldCreatedTs, v))
}

// CreatedTsIn applies the In predicate on the "created_ts" field.
func CreatedTsIn(vs ...time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldCreatedTs, vs...))
}

// CreatedTsNotIn applies the NotIn predicate on the "created_ts" field.
func CreatedTsNotIn(vs ...time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldCreatedTs, vs...))
}

// CreatedTsGT applies the GT predicate on the "created_ts" field.
func CreatedTsGT(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldCreatedTs, v))
}

// CreatedTsGTE applies the GTE predicate on the "created_ts" field.
func CreatedTsGTE(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldCreatedTs, v))
}

// CreatedTsLT applies the LT predicate on the "created_ts" field.
func CreatedTsLT(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldCreatedTs, v))
}

// CreatedTsLTE applies the LTE predicate on the "created_ts" field.
func CreatedTsLTE(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldCreatedTs, v))
}

// UpdatedTsEQ applies the EQ predicate on the "updated_ts" field.
func UpdatedTsEQ(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldUpdatedTs, v))
}

// UpdatedTsNEQ applies the NEQ predicate on the "updated_ts" field.
func UpdatedTsNEQ(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldUpdatedTs, v))
}

// UpdatedTsIn applies the In predicate on the "updated_ts" field.
func UpdatedTsIn(vs ...time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldUpdatedTs, vs...))
}

// UpdatedTsNotIn applies the NotIn predicate on the "updated_ts" field.
func UpdatedTsNotIn(vs ...time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldUpdatedTs, vs...))
}

// UpdatedTsGT applies the GT predicate on the "updated_ts" field.
func UpdatedTsGT(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldUpdatedTs, v))
}

// UpdatedTsGTE applies the GTE predicate on the "updated_ts" field.
func UpdatedTsGTE(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldUpdatedTs, v))
}

// UpdatedTsLT applies the LT predicate on the "updated_ts" field.
func UpdatedTsLT(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldUpdatedTs, v))
}

// UpdatedTsLTE applies the LTE predicate on the "updated_ts" field.
func UpdatedTsLTE(v time.Time) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldUpdatedTs, v))
}

// RowStatusEQ applies the EQ predicate on the "row_status" field.
func RowStatusEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldRowStatus, v))
}

// RowStatusNEQ applies the NEQ predicate on the "row_status" field.
func RowStatusNEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldRowStatus, v))
}

// RowStatusIn applies the In predicate on the "row_status" field.
func RowStatusIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldRowStatus, vs...))
}

// RowStatusNotIn applies the NotIn predicate on the "row_status" field.
func RowStatusNotIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldRowStatus, vs...))
}

// RowStatusGT applies the GT predicate on the "row_status" field.
func RowStatusGT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldRowStatus, v))
}

// RowStatusGTE applies the GTE predicate on the "row_status" field.
func RowStatusGTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldRowStatus, v))
}

// RowStatusLT applies the LT predicate on the "row_status" field.
func RowStatusLT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldRowStatus, v))
}

// RowStatusLTE applies the LTE predicate on the "row_status" field.
func RowStatusLTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldRowStatus, v))
}

// RowStatusContains applies the Contains predicate on the "row_status" field.
func RowStatusContains(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContains(FieldRowStatus, v))
}

// RowStatusHasPrefix applies the HasPrefix predicate on the "row_status" field.
func RowStatusHasPrefix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasPrefix(FieldRowStatus, v))
}

// RowStatusHasSuffix applies the HasSuffix predicate on the "row_status" field.
func RowStatusHasSuffix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasSuffix(FieldRowStatus, v))
}

// RowStatusEqualFold applies the EqualFold predicate on the "row_status" field.
func RowStatusEqualFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEqualFold(FieldRowStatus, v))
}

// RowStatusContainsFold applies the ContainsFold predicate on the "row_status" field.
func RowStatusContainsFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContainsFold(FieldRowStatus, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContainsFold(FieldContent, v))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v string) predicate.Memo {
	return predicate.Memo(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...string) predicate.Memo {
	return predicate.Memo(sql.FieldNotIn(FieldVisibility, vs...))
}

// VisibilityGT applies the GT predicate on the "visibility" field.
func VisibilityGT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGT(FieldVisibility, v))
}

// VisibilityGTE applies the GTE predicate on the "visibility" field.
func VisibilityGTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldGTE(FieldVisibility, v))
}

// VisibilityLT applies the LT predicate on the "visibility" field.
func VisibilityLT(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLT(FieldVisibility, v))
}

// VisibilityLTE applies the LTE predicate on the "visibility" field.
func VisibilityLTE(v string) predicate.Memo {
	return predicate.Memo(sql.FieldLTE(FieldVisibility, v))
}

// VisibilityContains applies the Contains predicate on the "visibility" field.
func VisibilityContains(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContains(FieldVisibility, v))
}

// VisibilityHasPrefix applies the HasPrefix predicate on the "visibility" field.
func VisibilityHasPrefix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasPrefix(FieldVisibility, v))
}

// VisibilityHasSuffix applies the HasSuffix predicate on the "visibility" field.
func VisibilityHasSuffix(v string) predicate.Memo {
	return predicate.Memo(sql.FieldHasSuffix(FieldVisibility, v))
}

// VisibilityEqualFold applies the EqualFold predicate on the "visibility" field.
func VisibilityEqualFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldEqualFold(FieldVisibility, v))
}

// VisibilityContainsFold applies the ContainsFold predicate on the "visibility" field.
func VisibilityContainsFold(v string) predicate.Memo {
	return predicate.Memo(sql.FieldContainsFold(FieldVisibility, v))
}

// HasRelatedMemo applies the HasEdge predicate on the "related_memo" edge.
func HasRelatedMemo() predicate.Memo {
	return predicate.Memo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RelatedMemoTable, RelatedMemoPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelatedMemoWith applies the HasEdge predicate on the "related_memo" edge with a given conditions (other predicates).
func HasRelatedMemoWith(preds ...predicate.Memo) predicate.Memo {
	return predicate.Memo(func(s *sql.Selector) {
		step := newRelatedMemoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemoRelation applies the HasEdge predicate on the "memo_relation" edge.
func HasMemoRelation() predicate.Memo {
	return predicate.Memo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MemoRelationTable, MemoRelationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemoRelationWith applies the HasEdge predicate on the "memo_relation" edge with a given conditions (other predicates).
func HasMemoRelationWith(preds ...predicate.MemoRelation) predicate.Memo {
	return predicate.Memo(func(s *sql.Selector) {
		step := newMemoRelationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Memo) predicate.Memo {
	return predicate.Memo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Memo) predicate.Memo {
	return predicate.Memo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Memo) predicate.Memo {
	return predicate.Memo(sql.NotPredicates(p))
}
