// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/memorelation"
	"github.com/usememos/memos/ent/predicate"
)

// MemoUpdate is the builder for updating Memo entities.
type MemoUpdate struct {
	config
	hooks    []Hook
	mutation *MemoMutation
}

// Where appends a list predicates to the MemoUpdate builder.
func (mu *MemoUpdate) Where(ps ...predicate.Memo) *MemoUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetResourceName sets the "resource_name" field.
func (mu *MemoUpdate) SetResourceName(s string) *MemoUpdate {
	mu.mutation.SetResourceName(s)
	return mu
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableResourceName(s *string) *MemoUpdate {
	if s != nil {
		mu.SetResourceName(*s)
	}
	return mu
}

// SetCreatorID sets the "creator_id" field.
func (mu *MemoUpdate) SetCreatorID(i int) *MemoUpdate {
	mu.mutation.ResetCreatorID()
	mu.mutation.SetCreatorID(i)
	return mu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableCreatorID(i *int) *MemoUpdate {
	if i != nil {
		mu.SetCreatorID(*i)
	}
	return mu
}

// AddCreatorID adds i to the "creator_id" field.
func (mu *MemoUpdate) AddCreatorID(i int) *MemoUpdate {
	mu.mutation.AddCreatorID(i)
	return mu
}

// SetCreatedTs sets the "created_ts" field.
func (mu *MemoUpdate) SetCreatedTs(t time.Time) *MemoUpdate {
	mu.mutation.SetCreatedTs(t)
	return mu
}

// SetNillableCreatedTs sets the "created_ts" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableCreatedTs(t *time.Time) *MemoUpdate {
	if t != nil {
		mu.SetCreatedTs(*t)
	}
	return mu
}

// SetUpdatedTs sets the "updated_ts" field.
func (mu *MemoUpdate) SetUpdatedTs(t time.Time) *MemoUpdate {
	mu.mutation.SetUpdatedTs(t)
	return mu
}

// SetNillableUpdatedTs sets the "updated_ts" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableUpdatedTs(t *time.Time) *MemoUpdate {
	if t != nil {
		mu.SetUpdatedTs(*t)
	}
	return mu
}

// SetRowStatus sets the "row_status" field.
func (mu *MemoUpdate) SetRowStatus(s string) *MemoUpdate {
	mu.mutation.SetRowStatus(s)
	return mu
}

// SetNillableRowStatus sets the "row_status" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableRowStatus(s *string) *MemoUpdate {
	if s != nil {
		mu.SetRowStatus(*s)
	}
	return mu
}

// SetContent sets the "content" field.
func (mu *MemoUpdate) SetContent(s string) *MemoUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableContent(s *string) *MemoUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetVisibility sets the "visibility" field.
func (mu *MemoUpdate) SetVisibility(s string) *MemoUpdate {
	mu.mutation.SetVisibility(s)
	return mu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableVisibility(s *string) *MemoUpdate {
	if s != nil {
		mu.SetVisibility(*s)
	}
	return mu
}

// AddRelatedMemoIDs adds the "related_memo" edge to the Memo entity by IDs.
func (mu *MemoUpdate) AddRelatedMemoIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddRelatedMemoIDs(ids...)
	return mu
}

// AddRelatedMemo adds the "related_memo" edges to the Memo entity.
func (mu *MemoUpdate) AddRelatedMemo(m ...*Memo) *MemoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddRelatedMemoIDs(ids...)
}

// AddMemoRelationIDs adds the "memo_relation" edge to the MemoRelation entity by IDs.
func (mu *MemoUpdate) AddMemoRelationIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddMemoRelationIDs(ids...)
	return mu
}

// AddMemoRelation adds the "memo_relation" edges to the MemoRelation entity.
func (mu *MemoUpdate) AddMemoRelation(m ...*MemoRelation) *MemoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemoRelationIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (mu *MemoUpdate) Mutation() *MemoMutation {
	return mu.mutation
}

// ClearRelatedMemo clears all "related_memo" edges to the Memo entity.
func (mu *MemoUpdate) ClearRelatedMemo() *MemoUpdate {
	mu.mutation.ClearRelatedMemo()
	return mu
}

// RemoveRelatedMemoIDs removes the "related_memo" edge to Memo entities by IDs.
func (mu *MemoUpdate) RemoveRelatedMemoIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveRelatedMemoIDs(ids...)
	return mu
}

// RemoveRelatedMemo removes "related_memo" edges to Memo entities.
func (mu *MemoUpdate) RemoveRelatedMemo(m ...*Memo) *MemoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveRelatedMemoIDs(ids...)
}

// ClearMemoRelation clears all "memo_relation" edges to the MemoRelation entity.
func (mu *MemoUpdate) ClearMemoRelation() *MemoUpdate {
	mu.mutation.ClearMemoRelation()
	return mu
}

// RemoveMemoRelationIDs removes the "memo_relation" edge to MemoRelation entities by IDs.
func (mu *MemoUpdate) RemoveMemoRelationIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveMemoRelationIDs(ids...)
	return mu
}

// RemoveMemoRelation removes "memo_relation" edges to MemoRelation entities.
func (mu *MemoUpdate) RemoveMemoRelation(m ...*MemoRelation) *MemoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemoRelationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemoUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemoUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemoUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemoUpdate) check() error {
	if v, ok := mu.mutation.ResourceName(); ok {
		if err := memo.ResourceNameValidator(v); err != nil {
			return &ValidationError{Name: "resource_name", err: fmt.Errorf(`ent: validator failed for field "Memo.resource_name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.CreatorID(); ok {
		if err := memo.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Memo.creator_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.RowStatus(); ok {
		if err := memo.RowStatusValidator(v); err != nil {
			return &ValidationError{Name: "row_status", err: fmt.Errorf(`ent: validator failed for field "Memo.row_status": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Visibility(); ok {
		if err := memo.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Memo.visibility": %w`, err)}
		}
	}
	return nil
}

func (mu *MemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.ResourceName(); ok {
		_spec.SetField(memo.FieldResourceName, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatorID(); ok {
		_spec.SetField(memo.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedCreatorID(); ok {
		_spec.AddField(memo.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.CreatedTs(); ok {
		_spec.SetField(memo.FieldCreatedTs, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedTs(); ok {
		_spec.SetField(memo.FieldUpdatedTs, field.TypeTime, value)
	}
	if value, ok := mu.mutation.RowStatus(); ok {
		_spec.SetField(memo.FieldRowStatus, field.TypeString, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(memo.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.Visibility(); ok {
		_spec.SetField(memo.FieldVisibility, field.TypeString, value)
	}
	if mu.mutation.RelatedMemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRelatedMemoIDs(); len(nodes) > 0 && !mu.mutation.RelatedMemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RelatedMemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemoRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemoRelationIDs(); len(nodes) > 0 && !mu.mutation.MemoRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemoRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemoUpdateOne is the builder for updating a single Memo entity.
type MemoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemoMutation
}

// SetResourceName sets the "resource_name" field.
func (muo *MemoUpdateOne) SetResourceName(s string) *MemoUpdateOne {
	muo.mutation.SetResourceName(s)
	return muo
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableResourceName(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetResourceName(*s)
	}
	return muo
}

// SetCreatorID sets the "creator_id" field.
func (muo *MemoUpdateOne) SetCreatorID(i int) *MemoUpdateOne {
	muo.mutation.ResetCreatorID()
	muo.mutation.SetCreatorID(i)
	return muo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableCreatorID(i *int) *MemoUpdateOne {
	if i != nil {
		muo.SetCreatorID(*i)
	}
	return muo
}

// AddCreatorID adds i to the "creator_id" field.
func (muo *MemoUpdateOne) AddCreatorID(i int) *MemoUpdateOne {
	muo.mutation.AddCreatorID(i)
	return muo
}

// SetCreatedTs sets the "created_ts" field.
func (muo *MemoUpdateOne) SetCreatedTs(t time.Time) *MemoUpdateOne {
	muo.mutation.SetCreatedTs(t)
	return muo
}

// SetNillableCreatedTs sets the "created_ts" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableCreatedTs(t *time.Time) *MemoUpdateOne {
	if t != nil {
		muo.SetCreatedTs(*t)
	}
	return muo
}

// SetUpdatedTs sets the "updated_ts" field.
func (muo *MemoUpdateOne) SetUpdatedTs(t time.Time) *MemoUpdateOne {
	muo.mutation.SetUpdatedTs(t)
	return muo
}

// SetNillableUpdatedTs sets the "updated_ts" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableUpdatedTs(t *time.Time) *MemoUpdateOne {
	if t != nil {
		muo.SetUpdatedTs(*t)
	}
	return muo
}

// SetRowStatus sets the "row_status" field.
func (muo *MemoUpdateOne) SetRowStatus(s string) *MemoUpdateOne {
	muo.mutation.SetRowStatus(s)
	return muo
}

// SetNillableRowStatus sets the "row_status" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableRowStatus(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetRowStatus(*s)
	}
	return muo
}

// SetContent sets the "content" field.
func (muo *MemoUpdateOne) SetContent(s string) *MemoUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableContent(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetVisibility sets the "visibility" field.
func (muo *MemoUpdateOne) SetVisibility(s string) *MemoUpdateOne {
	muo.mutation.SetVisibility(s)
	return muo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableVisibility(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetVisibility(*s)
	}
	return muo
}

// AddRelatedMemoIDs adds the "related_memo" edge to the Memo entity by IDs.
func (muo *MemoUpdateOne) AddRelatedMemoIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddRelatedMemoIDs(ids...)
	return muo
}

// AddRelatedMemo adds the "related_memo" edges to the Memo entity.
func (muo *MemoUpdateOne) AddRelatedMemo(m ...*Memo) *MemoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddRelatedMemoIDs(ids...)
}

// AddMemoRelationIDs adds the "memo_relation" edge to the MemoRelation entity by IDs.
func (muo *MemoUpdateOne) AddMemoRelationIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddMemoRelationIDs(ids...)
	return muo
}

// AddMemoRelation adds the "memo_relation" edges to the MemoRelation entity.
func (muo *MemoUpdateOne) AddMemoRelation(m ...*MemoRelation) *MemoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemoRelationIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (muo *MemoUpdateOne) Mutation() *MemoMutation {
	return muo.mutation
}

// ClearRelatedMemo clears all "related_memo" edges to the Memo entity.
func (muo *MemoUpdateOne) ClearRelatedMemo() *MemoUpdateOne {
	muo.mutation.ClearRelatedMemo()
	return muo
}

// RemoveRelatedMemoIDs removes the "related_memo" edge to Memo entities by IDs.
func (muo *MemoUpdateOne) RemoveRelatedMemoIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveRelatedMemoIDs(ids...)
	return muo
}

// RemoveRelatedMemo removes "related_memo" edges to Memo entities.
func (muo *MemoUpdateOne) RemoveRelatedMemo(m ...*Memo) *MemoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveRelatedMemoIDs(ids...)
}

// ClearMemoRelation clears all "memo_relation" edges to the MemoRelation entity.
func (muo *MemoUpdateOne) ClearMemoRelation() *MemoUpdateOne {
	muo.mutation.ClearMemoRelation()
	return muo
}

// RemoveMemoRelationIDs removes the "memo_relation" edge to MemoRelation entities by IDs.
func (muo *MemoUpdateOne) RemoveMemoRelationIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveMemoRelationIDs(ids...)
	return muo
}

// RemoveMemoRelation removes "memo_relation" edges to MemoRelation entities.
func (muo *MemoUpdateOne) RemoveMemoRelation(m ...*MemoRelation) *MemoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemoRelationIDs(ids...)
}

// Where appends a list predicates to the MemoUpdate builder.
func (muo *MemoUpdateOne) Where(ps ...predicate.Memo) *MemoUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemoUpdateOne) Select(field string, fields ...string) *MemoUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Memo entity.
func (muo *MemoUpdateOne) Save(ctx context.Context) (*Memo, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemoUpdateOne) SaveX(ctx context.Context) *Memo {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemoUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemoUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemoUpdateOne) check() error {
	if v, ok := muo.mutation.ResourceName(); ok {
		if err := memo.ResourceNameValidator(v); err != nil {
			return &ValidationError{Name: "resource_name", err: fmt.Errorf(`ent: validator failed for field "Memo.resource_name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.CreatorID(); ok {
		if err := memo.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`ent: validator failed for field "Memo.creator_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.RowStatus(); ok {
		if err := memo.RowStatusValidator(v); err != nil {
			return &ValidationError{Name: "row_status", err: fmt.Errorf(`ent: validator failed for field "Memo.row_status": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Visibility(); ok {
		if err := memo.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Memo.visibility": %w`, err)}
		}
	}
	return nil
}

func (muo *MemoUpdateOne) sqlSave(ctx context.Context) (_node *Memo, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Memo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memo.FieldID)
		for _, f := range fields {
			if !memo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.ResourceName(); ok {
		_spec.SetField(memo.FieldResourceName, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatorID(); ok {
		_spec.SetField(memo.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedCreatorID(); ok {
		_spec.AddField(memo.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.CreatedTs(); ok {
		_spec.SetField(memo.FieldCreatedTs, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedTs(); ok {
		_spec.SetField(memo.FieldUpdatedTs, field.TypeTime, value)
	}
	if value, ok := muo.mutation.RowStatus(); ok {
		_spec.SetField(memo.FieldRowStatus, field.TypeString, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(memo.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.Visibility(); ok {
		_spec.SetField(memo.FieldVisibility, field.TypeString, value)
	}
	if muo.mutation.RelatedMemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRelatedMemoIDs(); len(nodes) > 0 && !muo.mutation.RelatedMemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RelatedMemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.RelatedMemoTable,
			Columns: memo.RelatedMemoPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemoRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemoRelationIDs(); len(nodes) > 0 && !muo.mutation.MemoRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemoRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.MemoRelationTable,
			Columns: []string{memo.MemoRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Memo{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
