// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/usememos/memos/ent/memo"
)

// Memo is the model entity for the Memo schema.
type Memo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceName holds the value of the "resource_name" field.
	ResourceName string `json:"resource_name,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID int `json:"creator_id,omitempty"`
	// CreatedTs holds the value of the "created_ts" field.
	CreatedTs time.Time `json:"created_ts,omitempty"`
	// UpdatedTs holds the value of the "updated_ts" field.
	UpdatedTs time.Time `json:"updated_ts,omitempty"`
	// RowStatus holds the value of the "row_status" field.
	RowStatus string `json:"row_status,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility string `json:"visibility,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemoQuery when eager-loading is set.
	Edges        MemoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemoEdges holds the relations/edges for other nodes in the graph.
type MemoEdges struct {
	// RelatedMemo holds the value of the related_memo edge.
	RelatedMemo []*Memo `json:"related_memo,omitempty"`
	// MemoRelation holds the value of the memo_relation edge.
	MemoRelation []*MemoRelation `json:"memo_relation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RelatedMemoOrErr returns the RelatedMemo value or an error if the edge
// was not loaded in eager-loading.
func (e MemoEdges) RelatedMemoOrErr() ([]*Memo, error) {
	if e.loadedTypes[0] {
		return e.RelatedMemo, nil
	}
	return nil, &NotLoadedError{edge: "related_memo"}
}

// MemoRelationOrErr returns the MemoRelation value or an error if the edge
// was not loaded in eager-loading.
func (e MemoEdges) MemoRelationOrErr() ([]*MemoRelation, error) {
	if e.loadedTypes[1] {
		return e.MemoRelation, nil
	}
	return nil, &NotLoadedError{edge: "memo_relation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Memo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memo.FieldID, memo.FieldCreatorID:
			values[i] = new(sql.NullInt64)
		case memo.FieldResourceName, memo.FieldRowStatus, memo.FieldContent, memo.FieldVisibility:
			values[i] = new(sql.NullString)
		case memo.FieldCreatedTs, memo.FieldUpdatedTs:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Memo fields.
func (m *Memo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case memo.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				m.ResourceName = value.String
			}
		case memo.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				m.CreatorID = int(value.Int64)
			}
		case memo.FieldCreatedTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_ts", values[i])
			} else if value.Valid {
				m.CreatedTs = value.Time
			}
		case memo.FieldUpdatedTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_ts", values[i])
			} else if value.Valid {
				m.UpdatedTs = value.Time
			}
		case memo.FieldRowStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field row_status", values[i])
			} else if value.Valid {
				m.RowStatus = value.String
			}
		case memo.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case memo.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				m.Visibility = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Memo.
// This includes values selected through modifiers, order, etc.
func (m *Memo) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryRelatedMemo queries the "related_memo" edge of the Memo entity.
func (m *Memo) QueryRelatedMemo() *MemoQuery {
	return NewMemoClient(m.config).QueryRelatedMemo(m)
}

// QueryMemoRelation queries the "memo_relation" edge of the Memo entity.
func (m *Memo) QueryMemoRelation() *MemoRelationQuery {
	return NewMemoClient(m.config).QueryMemoRelation(m)
}

// Update returns a builder for updating this Memo.
// Note that you need to call Memo.Unwrap() before calling this method if this Memo
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Memo) Update() *MemoUpdateOne {
	return NewMemoClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Memo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Memo) Unwrap() *Memo {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Memo is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Memo) String() string {
	var builder strings.Builder
	builder.WriteString("Memo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("resource_name=")
	builder.WriteString(m.ResourceName)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("created_ts=")
	builder.WriteString(m.CreatedTs.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_ts=")
	builder.WriteString(m.UpdatedTs.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("row_status=")
	builder.WriteString(m.RowStatus)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(m.Content)
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(m.Visibility)
	builder.WriteByte(')')
	return builder.String()
}

// Memos is a parsable slice of Memo.
type Memos []*Memo
