// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/usememos/memos/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/usememos/memos/ent/memo"
	"github.com/usememos/memos/ent/memorelation"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Memo is the client for interacting with the Memo builders.
	Memo *MemoClient
	// MemoRelation is the client for interacting with the MemoRelation builders.
	MemoRelation *MemoRelationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Memo = NewMemoClient(c.config)
	c.MemoRelation = NewMemoRelationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Memo:         NewMemoClient(cfg),
		MemoRelation: NewMemoRelationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Memo:         NewMemoClient(cfg),
		MemoRelation: NewMemoRelationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Memo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Memo.Use(hooks...)
	c.MemoRelation.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Memo.Intercept(interceptors...)
	c.MemoRelation.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MemoMutation:
		return c.Memo.mutate(ctx, m)
	case *MemoRelationMutation:
		return c.MemoRelation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MemoClient is a client for the Memo schema.
type MemoClient struct {
	config
}

// NewMemoClient returns a client for the Memo from the given config.
func NewMemoClient(c config) *MemoClient {
	return &MemoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `memo.Hooks(f(g(h())))`.
func (c *MemoClient) Use(hooks ...Hook) {
	c.hooks.Memo = append(c.hooks.Memo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `memo.Intercept(f(g(h())))`.
func (c *MemoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Memo = append(c.inters.Memo, interceptors...)
}

// Create returns a builder for creating a Memo entity.
func (c *MemoClient) Create() *MemoCreate {
	mutation := newMemoMutation(c.config, OpCreate)
	return &MemoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Memo entities.
func (c *MemoClient) CreateBulk(builders ...*MemoCreate) *MemoCreateBulk {
	return &MemoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemoClient) MapCreateBulk(slice any, setFunc func(*MemoCreate, int)) *MemoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemoCreateBulk{err: fmt.Errorf("calling to MemoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Memo.
func (c *MemoClient) Update() *MemoUpdate {
	mutation := newMemoMutation(c.config, OpUpdate)
	return &MemoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemoClient) UpdateOne(m *Memo) *MemoUpdateOne {
	mutation := newMemoMutation(c.config, OpUpdateOne, withMemo(m))
	return &MemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemoClient) UpdateOneID(id int) *MemoUpdateOne {
	mutation := newMemoMutation(c.config, OpUpdateOne, withMemoID(id))
	return &MemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Memo.
func (c *MemoClient) Delete() *MemoDelete {
	mutation := newMemoMutation(c.config, OpDelete)
	return &MemoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemoClient) DeleteOne(m *Memo) *MemoDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemoClient) DeleteOneID(id int) *MemoDeleteOne {
	builder := c.Delete().Where(memo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemoDeleteOne{builder}
}

// Query returns a query builder for Memo.
func (c *MemoClient) Query() *MemoQuery {
	return &MemoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemo},
		inters: c.Interceptors(),
	}
}

// Get returns a Memo entity by its id.
func (c *MemoClient) Get(ctx context.Context, id int) (*Memo, error) {
	return c.Query().Where(memo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemoClient) GetX(ctx context.Context, id int) *Memo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRelatedMemo queries the related_memo edge of a Memo.
func (c *MemoClient) QueryRelatedMemo(m *Memo) *MemoQuery {
	query := (&MemoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memo.Table, memo.FieldID, id),
			sqlgraph.To(memo.Table, memo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, memo.RelatedMemoTable, memo.RelatedMemoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemoRelation queries the memo_relation edge of a Memo.
func (c *MemoClient) QueryMemoRelation(m *Memo) *MemoRelationQuery {
	query := (&MemoRelationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memo.Table, memo.FieldID, id),
			sqlgraph.To(memorelation.Table, memorelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, memo.MemoRelationTable, memo.MemoRelationColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemoClient) Hooks() []Hook {
	return c.hooks.Memo
}

// Interceptors returns the client interceptors.
func (c *MemoClient) Interceptors() []Interceptor {
	return c.inters.Memo
}

func (c *MemoClient) mutate(ctx context.Context, m *MemoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Memo mutation op: %q", m.Op())
	}
}

// MemoRelationClient is a client for the MemoRelation schema.
type MemoRelationClient struct {
	config
}

// NewMemoRelationClient returns a client for the MemoRelation from the given config.
func NewMemoRelationClient(c config) *MemoRelationClient {
	return &MemoRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `memorelation.Hooks(f(g(h())))`.
func (c *MemoRelationClient) Use(hooks ...Hook) {
	c.hooks.MemoRelation = append(c.hooks.MemoRelation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `memorelation.Intercept(f(g(h())))`.
func (c *MemoRelationClient) Intercept(interceptors ...Interceptor) {
	c.inters.MemoRelation = append(c.inters.MemoRelation, interceptors...)
}

// Create returns a builder for creating a MemoRelation entity.
func (c *MemoRelationClient) Create() *MemoRelationCreate {
	mutation := newMemoRelationMutation(c.config, OpCreate)
	return &MemoRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MemoRelation entities.
func (c *MemoRelationClient) CreateBulk(builders ...*MemoRelationCreate) *MemoRelationCreateBulk {
	return &MemoRelationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemoRelationClient) MapCreateBulk(slice any, setFunc func(*MemoRelationCreate, int)) *MemoRelationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemoRelationCreateBulk{err: fmt.Errorf("calling to MemoRelationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemoRelationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemoRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MemoRelation.
func (c *MemoRelationClient) Update() *MemoRelationUpdate {
	mutation := newMemoRelationMutation(c.config, OpUpdate)
	return &MemoRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemoRelationClient) UpdateOne(mr *MemoRelation) *MemoRelationUpdateOne {
	mutation := newMemoRelationMutation(c.config, OpUpdateOne, withMemoRelation(mr))
	return &MemoRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemoRelationClient) UpdateOneID(id int) *MemoRelationUpdateOne {
	mutation := newMemoRelationMutation(c.config, OpUpdateOne, withMemoRelationID(id))
	return &MemoRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MemoRelation.
func (c *MemoRelationClient) Delete() *MemoRelationDelete {
	mutation := newMemoRelationMutation(c.config, OpDelete)
	return &MemoRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemoRelationClient) DeleteOne(mr *MemoRelation) *MemoRelationDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemoRelationClient) DeleteOneID(id int) *MemoRelationDeleteOne {
	builder := c.Delete().Where(memorelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemoRelationDeleteOne{builder}
}

// Query returns a query builder for MemoRelation.
func (c *MemoRelationClient) Query() *MemoRelationQuery {
	return &MemoRelationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMemoRelation},
		inters: c.Interceptors(),
	}
}

// Get returns a MemoRelation entity by its id.
func (c *MemoRelationClient) Get(ctx context.Context, id int) (*MemoRelation, error) {
	return c.Query().Where(memorelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemoRelationClient) GetX(ctx context.Context, id int) *MemoRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMemo queries the memo edge of a MemoRelation.
func (c *MemoRelationClient) QueryMemo(mr *MemoRelation) *MemoQuery {
	query := (&MemoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memorelation.Table, memorelation.FieldID, id),
			sqlgraph.To(memo.Table, memo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, memorelation.MemoTable, memorelation.MemoColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelatedMemo queries the related_memo edge of a MemoRelation.
func (c *MemoRelationClient) QueryRelatedMemo(mr *MemoRelation) *MemoQuery {
	query := (&MemoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(memorelation.Table, memorelation.FieldID, id),
			sqlgraph.To(memo.Table, memo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, memorelation.RelatedMemoTable, memorelation.RelatedMemoColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemoRelationClient) Hooks() []Hook {
	return c.hooks.MemoRelation
}

// Interceptors returns the client interceptors.
func (c *MemoRelationClient) Interceptors() []Interceptor {
	return c.inters.MemoRelation
}

func (c *MemoRelationClient) mutate(ctx context.Context, m *MemoRelationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemoRelationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemoRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemoRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemoRelationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MemoRelation mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Memo, MemoRelation []ent.Hook
	}
	inters struct {
		Memo, MemoRelation []ent.Interceptor
	}
)
